var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import fs from 'fs';
import inquirer from 'inquirer';
import download from '../utils/download.js';
export default () => __awaiter(void 0, void 0, void 0, function* () {
    const ans = yield inquirer.prompt([
        {
            type: 'input',
            name: 'json',
            message: 'JSON file path generated by instruction from https://github.com/sayeed205/plural-ripper',
            validate: input => {
                if (!fs.existsSync(input)) {
                    return 'JSON file does not exist';
                }
                return true;
            },
        },
        {
            type: 'input',
            name: 'output',
            message: 'Output directory path',
            default: './',
        },
    ]);
    const { json, output } = ans;
    // check if json file exists and is valid
    if (!fs.existsSync(json)) {
        console.log('JSON file does not exist');
        return process.exit(1);
    }
    // check if output directory exists else create it
    if (!fs.existsSync(output)) {
        fs.mkdirSync(output, { recursive: true });
    }
    // read json file
    const jsonData = fs.readFileSync(json, 'utf-8');
    // parse json data
    const course = JSON.parse(jsonData);
    download(course, output);
});
//# sourceMappingURL=main.prompt.js.map